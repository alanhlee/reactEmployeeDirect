{"version":3,"sources":["components/Employee/Employee.js","App.js","serviceWorker.js","index.js"],"names":["Employee","props","employee","first_name","last_name","email","id","App","state","employees","handleInputChange","event","setState","target","name","value","Axios","get","then","data","console","log","catch","err","error","this","sort","employee2","onClick","sortByLastNameA","sortByLastNameD","htmlFor","type","onChange","e","filter","toUpperCase","includes","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"mPAceA,EAZE,SAACC,GAEhB,OACE,4BACE,4BAAKA,EAAMC,SAASC,YACpB,4BAAKF,EAAMC,SAASE,WACpB,4BAAKH,EAAMC,SAASG,OACpB,4BAAKJ,EAAMC,SAASI,M,iBC+GXC,E,4MAlHbC,MAAQ,CACNJ,UAAW,GACXK,UAAW,I,EAEbC,kBAAoB,SAACC,GACnB,EAAKC,SAAL,eAAiBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,kEAsB/B,IAAD,OAClBC,IAAMC,IAAI,eACPC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPC,QAAQC,IAAIF,GACZ,EAAKP,SAAS,CAAEH,UAAWU,OAE5BG,OAAM,SAACC,GAAD,OAASH,QAAQI,MAAMD,Q,wCAGhCE,KAAKb,SAAS,CACZH,UAAWgB,KAAKjB,MAAMC,UAAUiB,MAAK,SAACxB,EAAUyB,GAC9C,OAAIzB,EAASE,UAAYuB,EAAUvB,WACzB,EACCF,EAASE,UAAYuB,EAAUvB,UACjC,EAEA,S,wCAMbqB,KAAKb,SAAS,CACZH,UAAWgB,KAAKjB,MAAMC,UAAUiB,MAAK,SAACxB,EAAUyB,GAC9C,OAAIzB,EAASE,UAAYuB,EAAUvB,UAC1B,EACEF,EAASE,UAAYuB,EAAUvB,WAChC,EAED,S,+BAML,IAAD,OACP,OACE,oCACA,2BACE,4BAAQwB,QAAS,kBAAM,EAAKC,oBAA5B,gCAEF,2BACE,4BAAQD,QAAS,kBAAM,EAAKE,oBAA5B,iCAEF,2BAAOC,QAAQ,UAAf,yBACA,2BAAOC,KAAK,OACZjB,MAAOU,KAAKjB,MAAMJ,UAClB6B,SAAU,SAAAC,GAAC,OAAI,EAAKtB,SAAS,CAACR,UAAW8B,EAAErB,OAAOE,WAUhD,+BACE,+BACE,4BACE,0CAGA,yCAGA,qCAGA,oCAKJ,+BACGU,KAAKjB,MAAMC,UAAU0B,QAAO,SAAAjC,GAC3B,OAAOA,EAASE,UAAUgC,cAAcC,SAAS,EAAK7B,MAAMJ,UAAUgC,kBACrEE,KAAI,SAACpC,GAAD,OACL,kBAAC,EAAD,CAAUqC,IAAKrC,EAASI,GAAIJ,SAAUA,c,GA1GlCsC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAE,GACLJ,QAAQI,MAAMA,EAAMgC,c","file":"static/js/main.5a8eca35.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Employee = (props) => {\r\n  // console.log(props.employee);\r\n  return (\r\n    <tr>\r\n      <td>{props.employee.first_name}</td>\r\n      <td>{props.employee.last_name}</td>\r\n      <td>{props.employee.email}</td>\r\n      <td>{props.employee.id}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Employee;\r\n","import React, { Component } from \"react\";\n// import Form from './components/Form'\nimport Employee from \"./components/Employee\";\nimport Axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    last_name: \"\",\n    employees: [],\n  };\n  handleInputChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  // handleSubmit = (event) => {\n  //   event.preventDefault();\n\n  //   let employees = JSON.parse(JSON.stringify(this.state.employees));\n\n  //   employees.push({\n  //     firstName: this.state.firstName,\n  //     lastName: this.state.lastName,\n  //     email: this.state.email,\n  //     id: this.state.id,\n  //   });\n\n  //   this.setState({\n  //     employees,\n  //     firstName: \"\",\n  //     lastName: \"\",\n  //     email: \"\",\n  //     id: \"\",\n  //   });\n  // };\n  componentDidMount() {\n    Axios.get(\"/users.json\")\n      .then(({ data }) => {\n        console.log(data);\n        this.setState({ employees: data });\n      })\n      .catch((err) => console.error(err));\n  }\n  sortByLastNameA() {\n    this.setState({\n      employees: this.state.employees.sort((employee, employee2) => {\n        if (employee.last_name < employee2.last_name) {\n          return -1;\n        } else if (employee.last_name > employee2.last_name) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }),\n    })\n  }\n  sortByLastNameD() {\n    this.setState({\n      employees: this.state.employees.sort((employee, employee2) => {\n        if (employee.last_name < employee2.last_name) {\n          return 1;\n        } else if (employee.last_name > employee2.last_name) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }),\n    })\n  }\n\n  render() {\n    return (\n      <>\n      <p>\n        <button onClick={() => this.sortByLastNameA()}>Sort by last name ascending</button>\n      </p>\n      <p>\n        <button onClick={() => this.sortByLastNameD()}>Sort by last name descending</button>\n      </p>\n      <label htmlFor=\"filter\">Filter by Last Name: </label>\n      <input type=\"text\" \n      value={this.state.last_name} \n      onChange={e => this.setState({last_name: e.target.value})} />\n        {/* <Form\n          firstName={this.state.firstName}\n          lastName={this.state.lastName}\n          email={this.state.email}\n          id={this.state.id}\n\n          handleInputChange={this.handleInputChange}\n          handleSubmit={this.handleSubmit}\n        /> */}\n        <table>\n          <thead>\n            <tr>\n              <th>\n                First Name\n              </th>\n              <th>\n                Last Name\n              </th>\n              <th>\n                Email\n              </th>\n              <th>\n                ID\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.employees.filter(employee => {\n              return employee.last_name.toUpperCase().includes(this.state.last_name.toUpperCase())\n            }).map((employee) => (\n              <Employee key={employee.id} employee={employee} />\n            ))}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}